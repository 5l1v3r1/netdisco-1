#!/usr/bin/env perl

use strict;
use warnings;

our $home;

BEGIN {
  use FindBin;
  FindBin::again();

  $home = ($ENV{NETDISCO_HOME} || $ENV{HOME});

  # try to find a localenv if one isn't already in place.
  if (!exists $ENV{PERL_LOCAL_LIB_ROOT}) {
      use File::Spec;
      my $localenv = File::Spec->catfile($FindBin::RealBin, 'localenv');
      exec($localenv, $0, @ARGV) if -f $localenv;
      $localenv = File::Spec->catfile($home, 'perl5', 'bin', 'localenv');
      exec($localenv, $0, @ARGV) if -f $localenv;

      die "Sorry, can't find libs required for App::Netdisco.\n"
        if !exists $ENV{PERLBREW_PERL};
  }
}

BEGIN {
  use Path::Class;

  # stuff useful locations into @INC and $PATH
  unshift @INC,
    dir($FindBin::RealBin)->parent->subdir('lib')->stringify,
    dir($FindBin::RealBin, 'lib')->stringify;
}

# for netdisco app config
use App::Netdisco;
use App::Netdisco::Daemon::Job;
use Dancer qw/:moose :script/;

info "App::Netdisco version $App::Netdisco::VERSION loaded.";

use Try::Tiny;
use Pod::Usage;
use Getopt::Long;
Getopt::Long::Configure ("bundling");

my ($device, $port, $extra, $debug);
my ($infotrace, $snmptrace, $sqltrace) = (0, 0, 0);

my $result = GetOptions(
  'device|d=s' => \$device,
  'port|p=s'   => \$port,
  'extra|e=s'  => \$extra,
  'debug|D'    => \$debug,
  'infotrace|I+' => \$infotrace,
  'snmptrace|S+' => \$snmptrace,
  'sqltrace|Q+'  => \$sqltrace,
) or pod2usage(
  -msg => 'error: bad options',
  -verbose => 0,
  -exitval => 1,
);

my $CONFIG = config();
$CONFIG->{logger} = 'console';
$CONFIG->{log} = ($debug ? 'debug' : 'info');

$ENV{INFO_TRACE} ||= $infotrace;
$ENV{SNMP_TRACE} ||= $snmptrace;
$ENV{DBIC_TRACE} ||= $sqltrace;

# reconfigure logging to force console output
Dancer::Logger->init('console', $CONFIG);

# get requested action
my $action = shift @ARGV;

unless ($action) {
    pod2usage(
      -msg => 'error: missing action!',
      -verbose => 2,
      -exitval => 2,
    );
}

# create worker (placeholder object for the role methods)
{
  package MyWorker;

  use Moo;
  use Module::Load ();
  use Data::Printer ();

  with 'App::Netdisco::Daemon::Worker::Poller::Device';
  with 'App::Netdisco::Daemon::Worker::Poller::Arpnip';
  with 'App::Netdisco::Daemon::Worker::Poller::Macsuck';
  with 'App::Netdisco::Daemon::Worker::Poller::Nbtstat';
  with 'App::Netdisco::Daemon::Worker::Poller::Expiry';
  with 'App::Netdisco::Daemon::Worker::Interactive::DeviceActions';
  with 'App::Netdisco::Daemon::Worker::Interactive::PortActions';

  eval { Module::Load::load 'App::Netdisco::Util::Graph' };
  sub graph {
    App::Netdisco::Util::Graph::graph();
    return ('done', 'Generated graph data.');
  }

  use App::Netdisco::Util::NodeMonitor ();
  sub monitor {
    App::Netdisco::Util::NodeMonitor::monitor();
    return ('done', 'Generated monitor data.');
  }

  use App::Netdisco::Util::SNMP ();
  use App::Netdisco::Util::Device qw/get_device delete_device/;
  use NetAddr::IP::Lite ':lower';

  use Scalar::Util 'blessed';
  sub show {
    my $ip = NetAddr::IP::Lite->new($device)
      or return ('error', "Bad host or IP: $device");
    my $dev = get_device($ip->addr);
    unless (blessed $dev and $dev->in_storage) {
        return ('error', "Don't know device: $device");
    }

    $extra ||= 'interfaces'; my $class = undef;
    ($class, $extra) = split(/::([^:]+)$/, $extra);
    if ($class and $extra) {
        $class = 'SNMP::Info::'.$class;
    }
    else {
        $extra = $class;
        undef $class;
    }
    my $i = App::Netdisco::Util::SNMP::snmp_connect($dev, $class);
    Data::Printer::p($i->$extra);
    return ('done', "Showed $extra response from $device.");
  }

  sub delete {
    my $ip = NetAddr::IP::Lite->new($device)
      or return ('error', "Bad host or IP: $device");
    my $dev = get_device($ip->addr);
    unless (blessed $dev and $dev->in_storage) {
        return ('error', "Don't know device: $device");
    }

    $extra ||= ''; my $archive = 0;
    if ($extra =~ m/^(\d),(.+)/) {
        ($archive, $extra) = ($1, $2);
    }
    delete_device($dev->ip, $archive, $extra);
    return ('done', "Deleted device $device.");
  }
}
my $worker = MyWorker->new();

# belt and braces check before we go ahead
if (not $worker->can( $action )) {
  pod2usage(
    -msg => (sprintf 'error: %s is not a valid action', $action),
    -verbose => 2,
    -exitval => 3,
  );
}

# what job are we asked to do?
my $job = App::Netdisco::Daemon::Job->new({
  job => 0,
  action => $action,
  device => $device,
  port   => $port,
  subaction => $extra,
});

# do job
my ($status, $log);
try {
    info sprintf '%s: started at %s', $action, scalar localtime;
    ($status, $log) = $worker->$action($job);
}
catch {
    $status = 'error';
    $log = "error running job: $_";
};

info sprintf '%s: finished at %s', $action, scalar localtime;
info sprintf '%s: status %s: %s', $action, $status, $log;

exit ($status eq 'done' ? 0 : 1);

=head1 NAME

netdisco-do - Run any Netdisco job from the command-line.

=head1 SYNOPSIS

 ~/bin/netdisco-do <action> [-DISQ] [-d <device> [-p <port>] [-e <extra>]]

=head1 DESCRIPTION

This program allows you to run any Netdisco poller job from the command-line.

Note that some jobs (C<discoverall>, C<macwalk>, C<arpwalk>, C<nbtwalk>)
simply add entries to the Netdisco job queue for other jobs, so won't seem
to do much when you trigger them.

=head1 ACTIONS

=head2 discover

Run a discover on the device (specified with C<-d>).

 ~netdisco/bin/netdisco-do discover -d 192.0.2.1

=head2 macsuck

Run a macsuck on the device (specified with C<-d>).

 ~netdisco/bin/netdisco-do macsuck -d 192.0.2.1

=head2 arpnip

Run an arpnip on the device (specified with C<-d>).

 ~netdisco/bin/netdisco-do arpnip -d 192.0.2.1

=head2 delete

Delete a device (specified with C<-d>). Pass a log message for the action in
the C<-e> parameter. Optionally request for associated nodes to be archived
(rather than deleted) by prefixing the C<-e> parameter with "C<1,>".

 ~netdisco/bin/netdisco-do delete -d 192.0.2.1
 ~netdisco/bin/netdisco-do delete -d 192.0.2.1 -e 'older than the sun'
 ~netdisco/bin/netdisco-do delete -d 192.0.2.1 -e '1,older than the sun'

=head2 nbtstat

Run an nbtstat on the node (specified with C<-d>).

 ~netdisco/bin/netdisco-do nbtstat -d 192.0.2.2

=head2 graph

Generate GrapgViz graphs for the largest cluster of devices.

=head2 show

Dump the content of an SNMP MIB leaf, which is useful for diagnostics and
troubleshooting. You should provide the "C<-e>" option which is the name of
the leaf (such as C<interfaces> or C<uptime>).

If you wish to test with a device class other than that discovered, prefix the
leaf with the class short name, for example "C<Layer3::C3550::interfaces>" or
"C<Layer2::HP::uptime>".

 ~netdisco/bin/netdisco-do show -d 192.0.2.1 -e interfaces
 ~netdisco/bin/netdisco-do show -d 192.0.2.1 -e Layer2::HP::interfaces

=head2 set_location

Set the SNMP location field on the device (specified with C<-d>). Pass the
location string in the C<-e> extra parameter.

 ~netdisco/bin/netdisco-do set_location -d 192.0.2.1 -e 'wiring closet'

=head2 set_contact

Set the SNMP contact field on the device (specified with C<-d>). Pass the
contact name in the C<-e> extra parameter.

 ~netdisco/bin/netdisco-do set_contact -d 192.0.2.1 -e 'tel: 555-2453'

=head2 set_portname

Set the description on a device port. Requires the C<-d> parameter (device),
C<-p> parameter (port), and C<-e> parameter (description).

 ~netdisco/bin/netdisco-do set_portname -d 192.0.2.1 -p FastEthernet0/1 -e 'Web Server'

=head2 set_portcontrol

Set the up/down status on a device port. Requires the C<-d> parameter
(device), C<-p> parameter (port), and C<-e> parameter ("up" or "down").

 ~netdisco/bin/netdisco-do set_portcontrol -d 192.0.2.1 -p FastEthernet0/1 -e up
 ~netdisco/bin/netdisco-do set_portcontrol -d 192.0.2.1 -p FastEthernet0/1 -e down

=head2 set_vlan

Set the native VLAN on a device port. Requires the C<-d> parameter (device),
C<-p> parameter (port), and C<-e> parameter (VLAN number).

 ~netdisco/bin/netdisco-do set_vlan -d 192.0.2.1 -p FastEthernet0/1 -e 102

=head2 set_power

Set the PoE on/off status on a device port. Requires the C<-d> parameter
(device), C<-p> parameter (port), and C<-e> parameter ("on" or "off").

 ~netdisco/bin/netdisco-do set_power -d 192.0.2.1 -p FastEthernet0/1 -e on
 ~netdisco/bin/netdisco-do set_power -d 192.0.2.1 -p FastEthernet0/1 -e off

=head1 DEBUG LEVELS

The flags "C<-DISQ>" can be specified, multiple times, and enable the
following items in order:

=over 4

=item C<-D>

Netdisco debug log level

=item C<-I> or C<-II>

L<SNMP::Info> trace level (1 or 2).

=item C<-S> or C<-SS> or C<-SSS>

L<SNMP> (net-snmp) trace level (1, 2 or 3).

=item C<-Q>

L<DBIx::Class> trace enabled.

=back

=cut
